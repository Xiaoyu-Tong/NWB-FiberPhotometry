function [nwb_path] = MFP2NWB(MFPfile, nwb_path)
    [basepath, blockname] = fileparts(MFPfile);
    if ~exist('nwb_path', 'var') || isempty(nwb_path)
        nwb_path = fullfile(basepath, [blockname '.nwb']);
    end
    load(MFPfile);
    file = NwbFile( ...
        'session_description', 'Multi-Fiber Photometry', ...
        'identifier', blockname, ...
        'session_start_time',datestr(now, 'yyyy-mm-dd HH:MM:SS'), ...
        'file_create_date', datestr(now, 'yyyy-mm-dd HH:MM:SS'));
    FL=1.0/(timestamp_MFP(2)-timestamp_MFP(1))
    for i=1:length(regions)
        FPinfo=types.core.FiberPhotometryInfo(...
            'region', regions{i});
         ts = types.core.FiberPhotometrySeries(...
            'starting_time_rate',FL,...
            'data',LMag(i,:),...
            'data_unit','dF/F is dimentionless',...
            'description','For the session recording date, please refer to the blockname instead of session_start_time in the data',...
            'info',FPinfo);
        file.acquisition.set(regions{i},ts);
    end
    FParraycontainer=types.core.FiberPhotometryArrayContainer();
    file.acquisition.set('FiberPhotometryArray',FParraycontainer);
    behaviorDict={'Other','Intro_Baseline','Rmv_Baseline','Intro_F','Rmv_F','Intro_M','Rmv_M','Intro_Pup','Rmv_Pup',...
    'Intro_Toy','Rmv_Toy','Attempted_Attack','Attack','First_Investigate','Investigate','Investigate_post','Circle',...
    'Attempted_Mount','Mount','Thrust','Ejaculate'};
    behaviorSeries=struct();
    for i=1:length(behaviorDict)
        behaviorSeries.(behaviorDict{i})=zeros(1,Fstop(end));
    end
    for i=1:length(behaviors)
        behaviorSeries.(behaviorDict{find(strcmp(behaviorDict, behaviors{i}))})(Fstart(i):Fstop(i))=1;
    end
    Fstart=types.hdmf_common.VectorData('data',Fstart,'description','start time of behavior events');
    Fstop=types.hdmf_common.VectorData('data',Fstop,'description','end time of behavior events');
    behaviors=types.hdmf_common.VectorData('data',behaviors,'description', 'human-annotated behavior events');   
    behaviorSeries = types.core.TimeIntervals( ...
    'colnames', {'start_time', 'stop_time', 'label'}, ...
    'description', 'Behavior Annotation', ...
    'id', types.hdmf_common.ElementIdentifiers('data', 1:length(behaviors)), ...
    'start_time',Fstart, ...
    'stop_time', Fstop, ...
    'label',behaviors);
%     ts = types.core.BehavioralTimeSeries(...
%             'timeseries',behaviorSeries);
    file.intervals.set('Behavior Annotation',behaviorSeries);
    nwbExport(file, nwb_path);
end